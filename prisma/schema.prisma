generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String?  
  email           String?      @unique
  password        String?
  isAdmin         Boolean      @default(false)
  emailVerified   DateTime?    
  image           String?
  gender          String?
  address         String?
  city            String?
  state           String?
  phoneNo         String?
  postalCode      String?  
  favorite        String[]   @db.ObjectId
  accounts        Account[]  
  likes           String[]     @db.ObjectId
  reviews         Review[]     // <-- Add this line
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  token    String   @unique
  expires  DateTime
  @@unique([email, token])
}

model PasswordReset {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime
  @@unique([email, token])
}

model Product {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  proName         String?    @unique
  proDesc         String?
  proPrice        String?
  proImage        String[]
  proCategory     String?
  proSubCategory  String?
  isProAvailable  String?   
  proColors       String[]  
  proSizes        String[]  
  likes           String[]   @db.ObjectId
  reviews         Review[]    

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Review {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId  
  productId       String     @db.ObjectId  
  userId          String     @db.ObjectId
  revTitle        String
  revDesc         String
  revRating       String

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
